Pragma solidity ^0.8.0;

contract InsurancePolicy {

// Address of the policyholder
address payable public policyholder;

// Address of the insurance company
address payable public insuranceCompany;

// Policy start date
uint256 public policyStartDate;

// Policy end date
uint256 public policyEndDate;

// Premium amount
uint256 public premiumAmount;

// Covered event
string public coveredEvent;

// Constructor
constructor(
    address payable _policyholder,
    address payable _insuranceCompany,
    uint256 _premiumAmount,
    string memory _coveredEvent
) {
    policyholder = _policyholder;
    insuranceCompany = _insuranceCompany;
    premiumAmount = _premiumAmount;
    coveredEvent = _coveredEvent;

    // Set the policy start date to the current timestamp
    policyStartDate = block.timestamp;

    // Set the policy end date to 5 years from the start date
    policyEndDate = block.timestamp + 5 years;
}

// Function to pay the premium
function payPremium() public payable {
    require(msg.value == premiumAmount, "Premium amount must be equal to the specified amount");

    // Transfer the premium amount to the insurance company
    insuranceCompany.transfer(premiumAmount);
}

// Function to file a claim
function fileClaim(string memory _eventDescription) public {
    require(block.timestamp <= policyEndDate, "Policy has expired");
    require(keccak256(abi.encodePacked(_eventDescription)) == keccak256(abi.encodePacked(coveredEvent)), "Event does not match the covered event");

    // Transfer the payout amount to the policyholder
    policyholder.transfer(premiumAmount);
}
}
__------------------------------------------------------------------------------------------------------------


contract InsurancePolicy contractInstance = new InsurancePolicy(
    address(msg.sender), // Address of the policyholder
    address(0x1234567890ABCDEF1234567890ABCDEF12345678), // Address of the insurance company
    1000000000000000000, // Premium amount in wei
    "Car accident" // Covered event
);

contractInstance.payPremium();

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


pragma solidity ^0.8.0;

contract InsurancePolicy {

// The address of the policyholder
address public policyholder;

// The address of the insurance company
address public insuranceCompany;

// The start date of the policy
uint256 public startDate;

// The end date of the policy
uint256 public endDate;

// The amount of the policy
uint256 public amount;

// The status of the policy
enum Status { ACTIVE, INACTIVE, EXPIRED }
Status public status;

// An event to emit when the policy is created
event PolicyCreated(address policyholder, address insuranceCompany, uint256 amount);

// An event to emit when the policy is cancelled
event PolicyCancelled(address policyholder, address insuranceCompany);

// An event to emit when the policy is paid out
event PolicyPaidOut(address policyholder, address insuranceCompany, uint256 amount);

// Constructor function
constructor(address _policyholder, address _insuranceCompany, uint256 _amount) {
    policyholder = _policyholder;
    insuranceCompany = _insuranceCompany;
    amount = _amount;
    startDate = block.timestamp;
    endDate = startDate + 5 years;
    status = Status.ACTIVE;
    emit PolicyCreated(policyholder, insuranceCompany, amount);
}

// Function to cancel the policy
function cancelPolicy() public {
    require(msg.sender == policyholder, "Only the policyholder can cancel the policy");
    require(status == Status.ACTIVE, "Policy is not active");
    status = Status.INACTIVE;
    emit PolicyCancelled(policyholder, insuranceCompany);
}

// Function to pay out the policy
function payOutPolicy() public {
    require(msg.sender == insuranceCompany, "Only the insurance company can pay out the policy");
    require(status == Status.ACTIVE, "Policy is not active");
    require(block.timestamp >= endDate, "Policy has not expired");
    status = Status.EXPIRED;
    insuranceCompany.transfer(amount);
    emit PolicyPaidOut(policyholder, insuranceCompany, amount);
}
}
